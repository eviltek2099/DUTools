{"slots":{"0":{"name":"Screen","type":{"events":[],"methods":[]}},"1":{"name":"Dector","type":{"events":[],"methods":[]}},"2":{"name":"ScreenList","type":{"events":[],"methods":[]}},"3":{"name":"DB","type":{"events":[],"methods":[]}},"4":{"name":"Door","type":{"events":[],"methods":[]}},"5":{"name":"ButtonUp","type":{"events":[],"methods":[]}},"6":{"name":"ButtonDown","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--https://auth-media.s3.amazonaws.com/media/organization_20/logo.png\n\n\n\nlocal function updateLogo()\n\t\n    local animLogoSlide = 1\n    local animSlideFade = 40\n    \n    local reverse = 100\n    \n    local leftLogo = svgStorage.getLeftSideLogo()\n    local rightLogo = svgStorage.getRightSideLogo()\n    \n    while true do\n\t\tself.co:waitForSeconds(0.01)\n        \n        local leftWrapper = [[\n        \t<div style=\"\n        \t\t\tmargin-left:]]..(-200+animLogoSlide)..[[px;\n        \t\t\tfilter:opacity(]]..(animSlideFade)..[[%) blur(2px);\n        \t\t\" >]]..leftLogo..[[</div>\n        ]]\n        \n        local rightWrapper = [[\n        \t<div style=\"\n        \t\t\tmargin-left:]]..(200-animLogoSlide)..[[px;\n        \t\t\tfilter:opacity(]]..(animSlideFade)..[[%) blur(2px);\n        \t\t\" >]]..rightLogo..[[</div>\n        ]]\n        \n        \n        local innerContent = \"\"\n        if animLogoSlide==200 then innerContent=svgStorage.getNormalLogo() \n        else innerContent=leftWrapper .. rightWrapper end\n            \n        \n        local html = [[\n            <div style=\"margin-top:20vh;width:100%;margin-left:-50px;text-align: center;filter: blur(0px) drop-shadow(0px 0px 0px #e8ffff) ;\">\n\t\t\t\t]] .. innerContent .. [[\n            </div>\n        ]]\n        \n        \n        \n        Screen.setRawHTML(html)\n        \n\t\tif animLogoSlide==200 then \n            return\n        end\n        \n        \n        animLogoSlide=animLogoSlide+20\n        if animLogoSlide>=200 then \n            animLogoSlide=200 \n        end\n        \n        animSlideFade=animSlideFade+4\n        if animSlideFade>=100 then \n            animSlideFade=100 \n        end\n        \n        \n        \n        \n    end\nend\n\n\n\nlocal co1 = self.co:create(function() return updateLogo() end)","filter":{"args":[],"signature":"start()","slotKey":0},"key":"0"},{"code":"\n\n\nsvgStorage={}\n\nfunction svgStorage.getNormalLogo()\n    return [[\n\t\t<svg width=\"17vh\" viewBox=\"0 0 75 153\" style=\"filter:blur(1px)\" >\n\t\t  <defs>\n\t\t    <linearGradient id=\"b\">\n\t\t      <stop offset=\"0\" stop-color=\"#e8ffff\"/>\n\t\t      <stop offset=\"1\" stop-color=\"#418ec7\"/>\n\t\t    </linearGradient>\n\t\t    <linearGradient id=\"a\">\n\t\t      <stop offset=\"0\" stop-color=\"#e8ffff\"/>\n\t\t      <stop offset=\"1\" stop-color=\"#418ec7\"/>\n\t\t    </linearGradient>\n\t\t    <radialGradient id=\"c\" cx=\"97\" cy=\"122\" r=\"17\" fx=\"97\" fy=\"122\" gradientTransform=\"matrix(.62414 -.0024 .00661 1.72488 36 -99)\" gradientUnits=\"userSpaceOnUse\" xlink:href=\"#a\"/>\n\t\t    <radialGradient id=\"d\" cx=\"97\" cy=\"121\" r=\"17\" fx=\"97\" fy=\"121\" gradientTransform=\"matrix(.66968 -.01096 .03875 2.36813 27 -176)\" gradientUnits=\"userSpaceOnUse\" xlink:href=\"#b\"/>\n\t\t    <radialGradient id=\"e\" cx=\"97\" cy=\"122\" r=\"17\" fx=\"97\" fy=\"122\" gradientTransform=\"matrix(.62414 -.0024 .00661 1.72488 36 -99)\" gradientUnits=\"userSpaceOnUse\" xlink:href=\"#a\"/>\n\t\t  </defs>\n\t\t  <g fill=\"#e8ffff\" >\n\t\t    <path fill=\"url(#d)\" d=\"M81 150l7-12v10l1 3 14-25-6-11-5 11 5 9-5 8-9-18 14-26 15 26-22 41z\" transform=\"matrix(2.29436 0 0 2.29436 -186 -227)\"/>\n\t\t    <path fill=\"url(#e)\" d=\"M98 153l7 13 9-16-7-12v9l-2 3-3-5z\" transform=\"matrix(2.29436 0 0 2.29436 -186 -227)\"/>\n\t\t  </g>\n\t\t</svg>\n    ]]\nend\n\nfunction svgStorage.getLeftSideLogo()\n    return [[\n    <svg width=\"17vh\" viewBox=\"0 0 75.4 153.5\">\n      <defs>\n        <linearGradient id=\"b\">\n          <stop offset=\"0\" stop-color=\"#e8ffff\"/>\n          <stop offset=\"1\" stop-color=\"#418ec7\"/>\n        </linearGradient>\n        <linearGradient id=\"a\">\n          <stop offset=\"0\" stop-color=\"#e8ffff\"/>\n          <stop offset=\"1\" stop-color=\"#418ec7\"/>\n        </linearGradient>\n        <radialGradient id=\"c\" cx=\"97.2\" cy=\"122.4\" r=\"16.6\" fx=\"97.2\" fy=\"122.4\" gradientTransform=\"matrix(.62414 -.0024 .00661 1.72488 35.7 -98.9)\" gradientUnits=\"userSpaceOnUse\" xlink:href=\"#a\"/>\n      </defs>\n      <g fill=\"#e8ffff\">\n        <path d=\"M37.3 0L24.6 23.3h25.7L37.3 0zM14.9 41.2l-8 14.6h20.8l7.6-14.6H15zm25.3 0L48 55.8h20.3l-8.1-14.6h-20zM11.8 73.7l8.1 15h12.8l3.7-6.7-4.5-8.3h-20zm32 0l-8.1 15h19.7l8.2-15H43.8zM6 106.6l-6 11.1 2 3.6h35.5l8-14.7H26l-6.3 11.6-3.4-6.8-.2-4.8h-10zm6 32.6l8 14 7.7-14H12zM59.4 88.7zm-11.5 17.9L40.1 121h33.2l2.1-4-5.9-10.4H59.4v3.5l-3.7 7.4-6.4-11h-1.4zm-.7 32.3l8.3 14.6 8-14.6H47.2z\"/>\n      </g>\n    </svg>\n    ]]\n    end\n\nfunction svgStorage.getRightSideLogo()\n    return [[\n    <svg width=\"17vh\" viewBox=\"0 0 75.4 153.5\">\n      <defs>\n        <linearGradient id=\"b\">\n          <stop offset=\"0\" stop-color=\"#e8ffff\"/>\n          <stop offset=\"1\" stop-color=\"#418ec7\"/>\n        </linearGradient>\n        <linearGradient id=\"a\">\n          <stop offset=\"0\" stop-color=\"#e8ffff\"/>\n          <stop offset=\"1\" stop-color=\"#418ec7\"/>\n        </linearGradient>\n        <radialGradient id=\"c\" cx=\"97.2\" cy=\"122.4\" r=\"16.6\" fx=\"97.2\" fy=\"122.4\" gradientTransform=\"matrix(.62414 -.0024 .00661 1.72488 35.7 -98.9)\" gradientUnits=\"userSpaceOnUse\" xlink:href=\"#a\"/>\n      </defs>\n      <g fill=\"#e8ffff\">\n        <path d=\"M2 121.3l10 18h15.7l9.8-18H2zM24.6 23.3l-9.7 18h20.4l2.4-4.7 2.5 4.6h20l-10-17.9H24.7zM7 55.8l-2.4 4.5 7.2 13.4h20L25 61.1l2.8-5.3H7zm41 0l2.7 5.1-6.9 12.8h19.8L71 60.5l-2.6-4.7H48zM59.4 88.7v17.9h10.1l-10-18h-.1zm-10.8 16.7l-.7 1.2h1.4l-.7-1.2zM40 121.3l-1.4 2.5 8.8 15.4h16l9.7-18H40zM19.9 88.6l6.3 11.8 6.6-11.8h-13zm15.8 0L26 106.5h19.6l9.9-18H35.7zm-20 .3L6 106.5h10l-.5-17.6z\"/>\n      </g>\n    </svg>\n\n    ]]\n    end","filter":{"args":[],"signature":"start()","slotKey":0},"key":"1"},{"code":"system.setScreen(\"Player detected \" .. id)\n\nlocal player = database.getPlayer(id);\nplayerLog.add(player.name,1)","filter":{"args":[{"variable":"*"}],"signature":"enter(id)","slotKey":1},"key":"2"},{"code":"system.setScreen(\"Player left \" .. id)\n\nlocal player = database.getPlayer(id);\nplayerLog.add(player.name,0)\n\nScreen.clear()","filter":{"args":[{"variable":"*"}],"signature":"leave(id)","slotKey":1},"key":"3"},{"code":"local page=1\nlocal itemsOnPage=9\n\nscreenListHandler={}\n\nfunction screenListHandler.next()\n    page=page+1\nend\nfunction screenListHandler.prev()\n    page=page-1\n    if page<=0 then page=1 end\nend\n\nlocal function updateScreen()\n\t\n    while true do\n        local data = playerLog.getTable()\n        local html = \"\"\n        local itemCounter=0\n        local itemCount=#data\n        local totalPages=(itemCount//itemsOnPage+1);\n        if page>totalPages then page=totalPages end\n        \n        \n        local rowHtml=\"\"\n        \n        for i,d in pairs(data) do\n            \n            if page*itemsOnPage-itemsOnPage<itemCounter and page*itemsOnPage>itemCounter then\n                if d.event==1 then\n                    rowHtml = [[\n                        <h3 style='color:lime'>]]..itemCounter..[[: Hello ]] .. d.user .. [[ </h3>\n                    ]]\n                elseif d.event==0 then\n                    rowHtml = [[\n                        <h3 style='color:red'>]]..itemCounter..[[: Goodbye ]] .. d.user .. [[ </h3>\n                    ]]\n                end\n                \n                html=html..[[<div style=\"border-bottom:1px solid gray\">]]..rowHtml..[[</div>]]\n            end\n            itemCounter=itemCounter+1\n\t\tend\n        \n        html = html .. [[\n                        <div style='overflow:hidden;background-color:lightgrey;color:black;text-align:center'>page ]]..page..[[/]]..totalPages..[[ </div>\n                    ]]\n        \n        html = [[<div style='border:2px solid white;font-size:24px;width:70%' >]]..html..[[</div>]]\n        \n        local id = ScreenList.setRawHTML(html)\n\t\tself.co:waitForSeconds(0.1)\n    end\nend\n\nlocal co1 = self.co:create(function() return updateScreen() end)","filter":{"args":[],"signature":"start()","slotKey":2},"key":"4"},{"code":"screenListController.onMouseDown(x, y)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":2},"key":"5"},{"code":"do\n    playerLog={}\n    \n    local ENTRY_LOG = \"entry-log\"\n    local player = database.getPlayer(id);\n\t--Screen.setCenteredText(\"Player detected \" .. player.name)\n\tlocal json = require (\"dkjson\")\n\t--local entryLog = DB.getStringValue('entry-log')\n\t\n\n\n\n  function playerLog.add(user,event)\n    local data = json.decode(DB.getStringValue(ENTRY_LOG),1,nil)\n    table.insert(data, {[\"user\"]=user,[\"event\"]=event})\n\tDB.setStringValue(ENTRY_LOG,json.encode(data))\n  end\n    \n    \n  function playerLog.getTable()\n    local entryLog = DB.getStringValue('entry-log')\n\treturn json.decode(DB.getStringValue('entry-log'),1,nil)\n  end\n    \n    \n    \nend","filter":{"args":[],"signature":"start()","slotKey":3},"key":"6"},{"code":"screenListHandler.next()","filter":{"args":[],"signature":"pressed()","slotKey":5},"key":"7"},{"code":"screenListHandler.prev()","filter":{"args":[],"signature":"pressed()","slotKey":6},"key":"8"},{"code":"if self.co:hasRunningCoroutines() then\n    local good, err = self.co:step()\n    if not good then\n        print(table.concat(err))\n    end\nend","filter":{"args":[],"signature":"update()","slotKey":-2},"key":"9"},{"code":"do\n    do\n        local _ENV = _ENV\n        package.preload[\"codeglitch0.coroutines.CoroutineManager\"] = function(...)\n            local arg = _G.arg\n            local isyieldable = coroutine.isyieldable\n            local current = coroutine.running\n\n            local insert = table.insert\n            local remove = table.remove\n\n            local CoroutineWrapper = require(\"codeglitch0.coroutines.CoroutineWrapper\")\n\n            local CoroutineManager = {}\n            CoroutineManager.__index = CoroutineManager\n\n            function CoroutineManager.new()\n                local self = setmetatable({}, CoroutineManager)\n\n                self._coroutines = {}\n\n                return self\n            end\n\n            function CoroutineManager:create(func)\n                local co = CoroutineWrapper.new(func)\n\n                insert(self._coroutines, co)\n\n                return co\n            end\n\n            function CoroutineManager:step()\n                local dead = {}\n                local errors = {}\n\n                for i = 1, #self._coroutines do\n                    local co = self._coroutines[i]\n\n                    local status, err = co:resumeIfReady()\n                    if not status then\n                        insert(errors, err)\n                        insert(dead, co)\n                    elseif not co:isRunning() then\n                        insert(dead, co)\n                    end\n                end\n\n                for x = 1, #dead do\n                    local co = dead[x]\n                    for i = 1, #self._coroutines do\n                        if self._coroutines[i] == co then\n                            remove(self._coroutines, i)\n                            break\n                        end\n                    end\n                end\n\n                return (#errors == 0), errors\n            end\n\n            function CoroutineManager:hasRunningCoroutines()\n                if #self._coroutines == 0 then\n                    return false\n                end\n\n                for i = 1, #self._coroutines do\n                    local co = self._coroutines[i]\n                    if co:isRunning() then\n                        return true\n                    end\n                end\n\n                return false\n            end\n\n            function CoroutineManager:getCurrent()\n                if not isyieldable() then\n                    error(\"Must be called within a running coroutine!\")\n                end\n\n                local co = current()\n\n                for i = 1, #self._coroutines do\n                    local wrapper = self._coroutines[i]\n\n                    if wrapper:handles(co) then\n                        return wrapper\n                    end\n                end\n\n                return nil\n            end\n\n            function CoroutineManager:_getRunningCoroutine()\n                local co = self:getCurrent()\n\n                if co == nil or not co:isRunning() then\n                    error(\"Coroutine not found or is completed.\")\n                end\n\n                return co\n            end\n\n            function CoroutineManager:waitUntilNextUpdate()\n                local co = self:_getRunningCoroutine()\n                return co:waitUntilNextUpdate()\n            end\n\n            function CoroutineManager:waitForResult(func)\n                local co = self:_getRunningCoroutine()\n                return co:waitForResult(func)\n            end\n\n            function CoroutineManager:waitForSeconds(seconds)\n                local co = self:_getRunningCoroutine()\n                return co:waitForSeconds(seconds)\n            end\n\n            return CoroutineManager\n        end\n    end\n\n    do\n        local _ENV = _ENV\n        package.preload[\"codeglitch0.coroutines.CoroutineWrapper\"] = function(...)\n            local arg = _G.arg\n            local getTime = system.getTime\n            local yield = coroutine.yield\n            local isyieldable = coroutine.isyieldable\n            local status = coroutine.status\n            local create = coroutine.create\n            local resume = coroutine.resume\n            local current = coroutine.running\n\n            local CoroutineWrapper = {}\n            CoroutineWrapper.__index = CoroutineWrapper\n\n            local alwaysTrue = function()\n                return true\n            end\n\n            function CoroutineWrapper.new(func)\n                local self = setmetatable({}, CoroutineWrapper)\n\n                self._co = create(\n                    function()\n                        return func()\n                    end\n                )\n                self._readyFunction = alwaysTrue\n\n                return self\n            end\n\n            function CoroutineWrapper:handles(co)\n                return self._co == co\n            end\n\n            function CoroutineWrapper:isRunning()\n                return self._co ~= nil and status(self._co) ~= \"dead\"\n            end\n\n            function CoroutineWrapper:resumeIfReady()\n                if self._co == nil or status(self._co) == \"dead\" then\n                    return false, \"Coroutine has already completed\"\n                end\n\n                if self._readyFunction == nil or not self._readyFunction() then\n                    return true, nil\n                end\n\n                self._readyFunction = nil\n\n                return resume(self._co)\n            end\n\n            function CoroutineWrapper:resumeNow()\n                if self._co == nil or status(self._co) == \"dead\" then\n                    return false, \"Coroutine has already completed\"\n                end\n\n                self._readyFunction = nil\n\n                return resume(self._co)\n            end\n\n            function CoroutineWrapper:waitForResult(func)\n                self._readyFunction = func\n\n                return yield()\n            end\n\n            function CoroutineWrapper:waitUntilNextUpdate()\n                return self:waitForResult(alwaysTrue)\n            end\n\n            function CoroutineWrapper:waitForSeconds(seconds)\n                local waitUntil = tonumber(getTime()) + tonumber(seconds)\n\n                local waitFunction = function()\n                    local current = tonumber(getTime())\n                    return current >= waitUntil\n                end\n\n                return self:waitForResult(waitFunction)\n            end\n\n            return CoroutineWrapper\n        end\n    end\nend\n\nlocal CoroutineManager = require(\"codeglitch0.coroutines.CoroutineManager\")\nself.co = CoroutineManager.new()","filter":{"args":[],"signature":"start()","slotKey":-2},"key":"10"},{"code":"system.showScreen(1)\nlocal json = require (\"dkjson\")\n\nlocal entryLog = DB.getStringValue('entry-log')\n\nif string.len(entryLog)==0 then\n    DB.setStringValue('entry-log',json.encode({}))\nend\n\nsystem.setScreen(\"Console initialized \" .. string.len(entryLog))\n\n\n","filter":{"args":[],"signature":"start()","slotKey":-2},"key":"11"},{"code":"-- Resets DB\n\nlocal json = require (\"dkjson\")\nlocal entryLog = DB.getStringValue('entry-log')\nDB.setStringValue('entry-log',json.encode({}))\nsystem.setScreen(\"Cleared DB\")","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":-2},"key":"12"}],"methods":[],"events":[]}