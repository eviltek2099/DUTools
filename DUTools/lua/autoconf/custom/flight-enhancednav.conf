name: Airplane Cockpit (Enhanced)
slots:
  core:
    class: CoreUnit
  gyro:
    class: GyroUnit
  container:
    class: FuelContainer
    select: all
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__rethrowErrorIfNotDisplayed = true
        __wrap_lua__canDisplayErrorOnSystemScreen = false
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          local unit = unit or self or {}
          local messageDisplayed = false
        
          for _, value in pairs(unit) do
            if type(value) == "table" and value.setCenteredText then -- value is a screen
              value.setCenteredText(message)
              messageDisplayed = true
            end
          end
        
          if not messageDisplayed and __wrap_lua__canDisplayErrorOnSystemScreen and system then
            system.showScreen(1)
            system.setScreen(string.format([=[
              <div style="font-size: 0.9em">
                Unhandled Lua error:
                <div style="font-family: Consolas, monospace; font-size: 0.9em">%s</div>
                This message will be displayed until the script is restarted without errors.
              </block>
            ]=], message))
        
            messageDisplayed = true
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and messageDisplayed and unit and unit.exit then
            unit.exit()
          end
        
          local shouldRethrowError =
            __wrap_lua__rethrowErrorAlways or
            __wrap_lua__rethrowErrorIfStopped and __wrap_lua__stopped or
            __wrap_lua__rethrowErrorIfNotDisplayed and not messageDisplayed
        
          if shouldRethrowError then
            error(message)
          end
        end
        
        local ok, message = pcall(function ()
        -- script code
        
        --------------------------------------------------------------------------------
        -- enhanced nav script bundle begins
        -- sha256 hash: e35f40cc5a13b5f76697352b5413564c27d70d5468d03d30e2a9e398583a7a65
        --------------------------------------------------------------------------------
        do
        
        do
        local _ENV = _ENV
        package.preload[ "common.CoordinateConverter" ] = function( ... ) _ENV = _ENV;
        local unpack = table.unpack
        
        local function createCoordinateConverter (params)
          params = params or {}
        
          local library = params.library or library
        
          local rightAxis = { 0, 0, 0 }
          local forwardAxis = { 0, 0, 0 }
          local upAxis = { 0, 0, 0 }
        
          local self = {}
        
          function self.setAxesFromCore (core)
            rightAxis = core.getConstructWorldOrientationRight()
            forwardAxis = core.getConstructWorldOrientationForward()
            upAxis = core.getConstructWorldOrientationUp()
          end
        
          function self.setAxesFromGyro (gyro)
            rightAxis = gyro.worldRight()
            forwardAxis = gyro.worldForward()
            upAxis = gyro.worldUp()
          end
        
          function self.relWorldToRightForwardUp (relWorldCoords)
            if relWorldCoords.x then
              relWorldCoords = { relWorldCoords:unpack() }
            end
        
            return library.systemResolution3(rightAxis, forwardAxis, upAxis, relWorldCoords)
          end
        
          function self.rightForwardUpToRelWorld (rightForwardUpCoords)
            if rightForwardUpCoords.x then
              rightForwardUpCoords = { rightForwardUpCoords:unpack() }
            end
        
            local rightX, rightY, rightZ = unpack(rightAxis)
            local forwardX, forwardY, forwardZ = unpack(forwardAxis)
            local upX, upY, upZ = unpack(upAxis)
        
            local rfuX, rfuY, rfuZ = unpack(rightForwardUpCoords)
        
            -- rel = rfuX * right + rfuY * fwd + rfuZ * up
        
            local relX = rfuX * rightX + rfuY * forwardX + rfuZ * upX
            local relY = rfuX * rightY + rfuY * forwardY + rfuZ * upY
            local relZ = rfuX * rightZ + rfuY * forwardZ + rfuZ * upZ
        
            return { relX, relY, relZ }
          end
        
          return self
        end
        
        return { new = createCoordinateConverter }
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "common.Hal" ] = function( ... ) _ENV = _ENV;
        -- "hardware abstraction layer" ;)
        -- more exactly, a slot abstraction layer
        
        local firstLetterToUpperCase = require "common.utils.string.firstLetterToUpperCase"
        local orderedInsert = require "common.utils.array.orderedInsert"
        local wordsToCamelCase = require "common.utils.string.wordsToCamelCase"
        
        local sort = table.sort
        
        local self = self or unit or {} -- in-game, self is the active control unit
        
        local Hal = {
          slotNames = {},
        
          elementType = {},
          elementInSlot = {},
          elementSlotName = {},
        
          elements = {}
          -- containers, databanks, etc. are added later
        }
        
        local function isControl (element) return element.setTimer and element.exit end
        local function isContainer (element) return element.getItemsMass end
        local function isCore (element) return element.spawnNumberSticker end
        local function isDatabank (element) return element.getNbKeys end
        local function isDynamicCore (element) return isCore(element) and element.getConstructCrossSection end
        local function isElementWithState (element) return element.getState end
        local function isEngine (element) return element.getMaxThrust end
        local function isGyro (element) return element.worldUp end
        local function isRadar (element) return element.getEntries and element.getConstructWorldPos end
        local function isScreen (element) return element.setCenteredText and element.setRawHTML end
        local function isSystem (element) return element.getTime end
        local function isLibrary (element) return element.systemResolution3 end
        local function isMaybePressableElement (element) return isElementWithState(element) and not isEngine(element) and not isGyro(element) and not isScreen(element) end
        
        local elementTypes = {
          { predicate = isControl, singular = "control", plural = "controls" },
          { predicate = isContainer,  singular = "container", plural = "containers" },
          { predicate = isCore, singular = "core", plural = "cores" },
          { predicate = isDatabank,  singular = "databank", plural = "databanks" },
          { predicate = isDynamicCore, singular = "dynamic core", plural = "dynamic cores" },
          { predicate = isElementWithState, singular = "element with state", plural = "elements with state" },
          { predicate = isEngine, singular = "engine", plural = "engines" },
          { predicate = isGyro, singular = "gyro", plural = "gyros" },
          { predicate = isRadar, singular = "radar", plural = "radars" },
          { predicate = isScreen, singular = "screen", plural = "screens" },
          { predicate = isSystem, singular = "system", plural = "systems" },
          { predicate = isLibrary, singular = "library", plural = "libraries" },
          { predicate = isMaybePressableElement, singular = "maybe pressable element", plural = "maybe pressable elements" }
        }
        
        -- set table names, getter function names and error messages for each element type
        
        for _, elementType in pairs(elementTypes) do
          elementType.singularCamelCase = wordsToCamelCase(elementType.singular)
          elementType.singularPascalCase = firstLetterToUpperCase(elementType.singularCamelCase)
        
          elementType.pluralCamelCase = wordsToCamelCase(elementType.plural)
          elementType.pluralPascalCase = firstLetterToUpperCase(elementType.pluralCamelCase)
        
          elementType.typeName = elementType.singularCamelCase
          elementType.tableName = elementType.pluralCamelCase
        
          elementType.requireOneFunctionName = "require" .. elementType.singularPascalCase
          elementType.requireAtLeastOneFunctionName = "require" .. elementType.pluralPascalCase
        
          elementType.requireOneErrorMessage = firstLetterToUpperCase(elementType.singular) .. " is not connected."
          elementType.requireAtLeastOneErrorMessage = "No " .. elementType.plural .. " are connected."
        end
        
        -- add getter functions
        
        for _, elementType in pairs(elementTypes) do
          Hal[elementType.requireOneFunctionName] = function ()
            return Hal[elementType.tableName][1] or error(elementType.requireOneErrorMessage)
          end
        
          Hal[elementType.requireAtLeastOneFunctionName] = function ()
            local elements = Hal[elementType.tableName]
            if #elements < 1 then error(elementType.requireAtLeastOneErrorMessage) end
            return elements
          end
        end
        
        -- detect elements and slot names
        
        local unsortedElements = {}
        
        for key, value in pairs(self) do
          if type(key) == "string" and type(value) == "table" and type(value.export) == "table" then
            local slotName, element = key, value
        
            Hal.slotNames[#Hal.slotNames + 1] = slotName
            Hal.elementInSlot[slotName] = element
            Hal.elementSlotName[element] = slotName
        
            unsortedElements[#unsortedElements + 1] = element
          end
        end
        
        -- sort elements and slot names
        
        sort(Hal.slotNames)
        
        for _, element in ipairs(unsortedElements) do
          orderedInsert(Hal.elements, Hal.elementSlotName, element)
        end
        
        -- organize elements by type
        
        for _, elementType in ipairs(elementTypes) do
          local elementTable = {}
          local elementTypePredicate = elementType.predicate
        
          Hal[elementType.tableName] = elementTable
        
          for _, element in ipairs(Hal.elements) do
            if elementTypePredicate(element) then
              elementTable[#elementTable + 1] = element
              Hal.elementType[element] = elementType.typeName
            end
          end
        end
        
        return Hal
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "common.utils.array.orderedInsert" ] = function( ... ) _ENV = _ENV;
        local format = string.format
        local insert = table.insert
        
        local function orderedInsert (arr, weights, val)
          if #arr == 0 then
            arr[1] = val
            return 1
          end
        
          local valWeight = weights[val]
          if not valWeight then
            error(format("value to be inserted (%s) is not in the weights table", val))
          end
        
          for i = 1, #arr do
            local nextVal = arr[i]
            local nextWeight = weights[nextVal]
        
            if not nextWeight then
              error(format("value at index %d (%s) is not in the weights table", i, nextVal))
            end
        
            if nextWeight > valWeight then
              insert(arr, i, val)
              return i
            end
          end
        
          arr[#arr + 1] = val
          return #arr
        end
        
        return orderedInsert
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "common.utils.string.firstLetterToUpperCase" ] = function( ... ) _ENV = _ENV;
        local function firstLetterToUpperCase (str)
          local result = str:gsub("^%l", function (ch)
            return ch:upper()
          end)
        
          return result
        end
        
        return firstLetterToUpperCase
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "common.utils.string.wordsToCamelCase" ] = function( ... ) _ENV = _ENV;
        local function wordsToCamelCase (str)
          local filteredStr = str
            :lower()
            :gsub("[^%a%d ]", " ")
            :gsub(" +", " ")
        
          local result = filteredStr:gsub(" (.)", function (ch)
            return ch:upper()
          end)
        
          return result
        end
        
        return wordsToCamelCase
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "pilot2.ConstructState" ] = function( ... ) _ENV = _ENV;
        -- Represents construct's state during the flush event
        -- Caches control/core/gyro function return values until reset
        
        local function makeReturnVec3 (fn)
          if not fn then error("fn must be not be nil") end
          return function () return vec3(fn()) end
        end
        
        local ConstructState = {}
        
        function ConstructState.new (options)
          options = options or {}
        
          local self = setmetatable({ getters = {} }, ConstructState)
        
          if options.control then self:addControlGetters(options.control) end
          if options.core then self:addCoreGetters(options.core) end
          if options.gyro then self:addGyroGetters(options.gyro) end
          if options.nav then self:addNavGetters(options.nav) end
        
          return self
        end
        
        function ConstructState:addControlGetters (control)
          local getters = self.getters
        
          getters.atmosphereDensity = control.getAtmosphereDensity
          getters.closestPlanetInfluence = control.getClosestPlanetInfluence
        end
        
        function ConstructState:addCoreGetters (core)
          local getters = self.getters
        
          getters.constructMass = core.getConstructMass
          getters.constructIMass = core.getConstructIMass
          getters.constructId = core.getConstructId
          getters.constructWorldPos = makeReturnVec3(core.getConstructWorldPos)
          getters.constructCrossSection = makeReturnVec3(core.getConstructCrossSection)
        
          getters.maxKinematicsParameters = core.getMaxKinematicsParameters
        
          getters.altitude = core.getAltitude
          getters.g = core.g
          getters.worldGravity = makeReturnVec3(core.getWorldGravity)
          getters.worldVertical = makeReturnVec3(core.getWorldVertical)
        
          getters.angularVelocity = makeReturnVec3(core.getAngularVelocity)
          getters.worldAngularVelocity = makeReturnVec3(core.getWorldAngularVelocity)
          getters.angularAcceleration = makeReturnVec3(core.getAngularAcceleration)
          getters.worldAngularAcceleration = makeReturnVec3(core.getWorldAngularAcceleration)
          getters.velocity = makeReturnVec3(core.getVelocity)
          getters.worldVelocity = makeReturnVec3(core.getWorldVelocity)
          getters.acceleration = makeReturnVec3(core.getAcceleration)
          getters.worldAcceleration = makeReturnVec3(core.getWorldAcceleration)
        
          getters.constructOrientationUp = makeReturnVec3(core.getConstructOrientationUp)
          getters.constructOrientationRight = makeReturnVec3(core.getConstructOrientationRight)
          getters.constructOrientationForward = makeReturnVec3(core.getConstructOrientationForward)
          getters.constructWorldOrientationUp = makeReturnVec3(core.getConstructWorldOrientationUp)
          getters.constructWorldOrientationRight = makeReturnVec3(core.getConstructWorldOrientationRight)
          getters.constructWorldOrientationForward = makeReturnVec3(core.getConstructWorldOrientationForward)
        
          getters.atmoFMaxPlus = function () return self.maxKinematicsParameters[1] end
          getters.atmoFMaxMinus = function () return self.maxKinematicsParameters[2] end
          getters.spaceFMaxPlus = function () return self.maxKinematicsParameters[3] end
          getters.spaceFMaxMinus = function () return self.maxKinematicsParameters[4] end
        
          getters.accelerationMagnitude = function () return self.worldAcceleration:len() end
          getters.speed = function () return self.worldVelocity:len() end
        
          getters.constructOrientationDown = function () return -self.constructOrientationUp end
          getters.constructOrientationLeft = function () return -self.constructOrientationLeft end
          getters.constructOrientationBackward = function () return -self.constrructOrientationForward end
          getters.constructWorldOrientationDown = function () return -self.constructWorldOrientationUp end
          getters.constructWorldOrientationLeft = function () return -self.constructWorldOrientationRight end
          getters.constructWorldOrientationBackward = function () return -self.constructWorldOrientationForward end
        end
        
        function ConstructState:addGyroGetters (gyro)
          local getters = self.getters
        
          getters.worldUp = makeReturnVec3(gyro.worldUp)
          getters.worldForward = makeReturnVec3(gyro.worldForward)
          getters.worldRight = makeReturnVec3(gyro.worldRight)
        
          getters.worldDown = function () return -self.worldUp end
          getters.worldBackward = function () return -self.worldForward end
          getters.worldLeft = function () return -self.worldRight end
        end
        
        function ConstructState:addNavGetters (nav)
          local getters = self.getters
        
          getters.lift = function () return nav.lift[1] end
          getters.brake = function () return nav.brake[1] end
          getters.throttle = function () return nav.thrustManager.throttle end
        end
        
        function ConstructState:__index (key)
          local getters = rawget(self, "getters") -- prevent infinite recursion if getters get accidentally deleted
          local getter = getters[key]
        
          if not getter then
            return rawget(ConstructState, key)
          end
        
          local value = getter()
          self[key] = value
          return value
        end
        
        function ConstructState:reset ()
          for key, _ in pairs(self) do
            if key ~= "getters" then
              self[key] = nil
            end
          end
        end
        
        return ConstructState
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "pilot2.flight-modes.EnhancedNavManagerMode" ] = function( ... ) _ENV = _ENV;
        local ConstructState = require "pilot2.ConstructState"
        local CoordinateConverter = require "common.CoordinateConverter"
        local StrafeState = require "pilot2.flight-modes.states.StrafeState"
        local MouseRotationState = require "pilot2.flight-modes.states.MouseRotationState"
        local NavManagerMode = require "pilot2.flight-modes.NavManagerMode"
        
        local base = NavManagerMode
        local EnhancedNavManagerMode = setmetatable({}, base)
        EnhancedNavManagerMode.__index = EnhancedNavManagerMode
        
        function EnhancedNavManagerMode.new (options)
          local self = base.new(options)
          setmetatable(self, EnhancedNavManagerMode)
        
          self.state = ConstructState.new(options)
          self.coordinateConverter = CoordinateConverter.new(options) -- used in some of the subclasses
        
          self.strafe = StrafeState.new(options.strafe)
          self.mouseRotation = MouseRotationState.new(options.mouseRotation)
        
          self.readoutData = {}
          self.collectReadoutData = options.collectReadoutData or false
        
          return self
        end
        
        function EnhancedNavManagerMode:createNavManager ()
          local nav = base.createNavManager(self)
        
          local baseGetYawInput = nav.getYawInput
          local baseGetPitchInput = nav.getPitchInput
          local baseGetRollInput = nav.getRollInput
        
          nav.updateYawPitchRoll = function (navSelf)
            baseGetYawInput(navSelf)
            baseGetPitchInput(navSelf)
            baseGetRollInput(navSelf)
          end
        
          nav.getYawInput = function (navSelf)
            local result = navSelf.lastYaw
        
            if self.mouseRotation.isActive then
              result = result + self.mouseRotation.lastYawInput
            end
        
            return result
          end
        
          nav.getPitchInput = function (navSelf)
            local result = navSelf.lastPitch
        
            if self.mouseRotation.isActive then
              result = result + self.mouseRotation.lastPitchInput
            end
        
            return result
          end
        
          nav.getRollInput = function (navSelf)
            if self.strafe.isActive then return 0 end
            return navSelf.lastRoll
          end
        
          self.state:addNavGetters(nav)
        
          return nav
        end
        
        function EnhancedNavManagerMode:relWorldToRightForwardUp (relWorldCoords)
          return vec3(self.coordinateConverter.relWorldToRightForwardUp(relWorldCoords))
        end
        
        function EnhancedNavManagerMode:rightForwardUpToRelWorld (rightForwardUpCoords)
          return vec3(self.coordinateConverter.rightForwardUpToRelWorld(rightForwardUpCoords))
        end
        
        function EnhancedNavManagerMode:composeForwardAcceleration ()
          return self.nav:composeForwardAcceleration(self.nav.thrustManager:getAccelerationCommand())
        end
        
        function EnhancedNavManagerMode:composeLiftUpAcceleration ()
          return self.state.lift * self.nav.upAcceleration * self.state.constructWorldOrientationUp - self.state.worldGravity
        end
        
        function EnhancedNavManagerMode:composeStrafeAcceleration ()
          if not self.strafe.isActive then return nullvector end
          return self.state.constructWorldOrientationRight * self.nav.lastRoll * self.strafe.acceleration
        end
        
        function EnhancedNavManagerMode.composeCorrectionAcceleration (_self)
          return nullvector
        end
        
        function EnhancedNavManagerMode:composeBrakingAcceleration ()
          return self.nav:composeBrakingAcceleration(self.nav:getBrakeInput())
        end
        
        function EnhancedNavManagerMode:updateViewLock ()
          -- system.lockView does nothing if called from system flush()!
          -- TODO: add activated/deactivated events to MouseRotationState and subscribe this function
        
          local isViewLocked = self.system.isViewLocked() == 1 and true or false
          local shouldViewBeLocked = self.mouseRotation.isActive
        
          if isViewLocked and not shouldViewBeLocked then
            self.system.lockView(0)
          elseif not isViewLocked and shouldViewBeLocked then
            self.system.lockView(1)
          end
        end
        
        function EnhancedNavManagerMode:onBeforeFlush ()
          self.state:reset()
          self.coordinateConverter.setAxesFromCore(self.core)
        
          self.mouseRotation:updateYaw(self.system.getMouseDeltaX())
          self.mouseRotation:updatePitch(self.system.getMouseDeltaY())
        
          self.nav:updateYawPitchRoll()
        
          self.state.strafe = self.strafe.isActive and self.nav.lastRoll or 0
        
          self.readoutData = {}
        end
        
        function EnhancedNavManagerMode.onAfterFlush (_self)
        end
        
        function EnhancedNavManagerMode:onFlush ()
          self:onBeforeFlush()
        
          local forwardAcceleration = self:composeForwardAcceleration()
          local liftAcceleration = self:composeLiftUpAcceleration()
          local strafeAcceleration = self:composeStrafeAcceleration()
          local correctionAcceleration = self:composeCorrectionAcceleration()
        
          local totalEngineAcceleration = forwardAcceleration + liftAcceleration + strafeAcceleration + correctionAcceleration
          local angularAcceleration = self:composeAngularAcceleration()
          local brakingAcceleration = self:composeBrakingAcceleration()
        
          self.nav:setEngineCommand("vertical,horizontal,torque", totalEngineAcceleration, angularAcceleration)
        
          self.nav:setEngineCommand("brake", brakingAcceleration, nullvector)
          self.nav:setBoosterCommand("booster")
        
          if self.collectReadoutData then
            local readoutData = self.readoutData
        
            readoutData.forwardAcceleration = forwardAcceleration
            readoutData.liftAcceleration = liftAcceleration
            readoutData.strafeAcceleration = strafeAcceleration
            readoutData.correctionAcceleration = correctionAcceleration
            readoutData.totalEngineAcceleration = totalEngineAcceleration
            readoutData.angularAcceleration = angularAcceleration
            readoutData.brakingAcceleration = brakingAcceleration
          end
        
          self:onAfterFlush()
        end
        
        function EnhancedNavManagerMode:onUpdate ()
          base.onUpdate(self)
          self:updateViewLock()
        end
        
        return EnhancedNavManagerMode
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "pilot2.flight-modes.NavManagerMode" ] = function( ... ) _ENV = _ENV;
        -- Duplicates the functionality of the default Nav script in one object
        
        local NavManagerMode = {}
        NavManagerMode.__index = NavManagerMode
        
        function NavManagerMode.new (options)
          local self = {
            antigrav = options.antigrav,
            core = options.core,
            gyro = options.gyro,
            control = options.control,
            system = options.system,
            hovercraftMode = options.hovercraftMode or 0,
            containers = options.containers or {}
          }
        
          return setmetatable(self, NavManagerMode)
        end
        
        function NavManagerMode:createNavManager ()
          local nav = Navigator.new(self.system, self.core, self.control)
        
          nav.hovercraftMode = self.hovercraftMode
        
          if nav.hovercraftMode == 1 then
            nav.pitchRollAmplitude = 0.5
            nav.pitchStabVelocityStart = 30
            nav.pitchStabVelocityEnd = 60
            nav.rollStabVelocityStart = 110
            nav.rollStabVelocityEnd = 150
          else
            nav.pitchRollAmplitude = 1.0
            nav.pitchStabVelocityStart = 10
            nav.pitchStabVelocityEnd = 30
            nav.rollStabVelocityStart = 110
            nav.rollStabVelocityEnd = 150
          end
        
          return nav
        end
        
        function NavManagerMode:onStart ()
          if not self.nav then
            self.nav = self:createNavManager()
          end
        
          for _, container in ipairs(self.containers) do
            container.show()
          end
        
          if self.antigrav then self.antigrav.show() end
          if self.gyro then self.gyro.show() end
        
          self.core.show()
        end
        
        function NavManagerMode:onStop ()
          for _, container in ipairs(self.containers) do
            container.hide()
          end
        
          if self.antigrav then self.antigrav.hide() end
          if self.gyro then self.gyro.hide() end
        
          self.core.hide()
        end
        
        function NavManagerMode:onActionStart (action)
          if action == "forward" then
            self.nav:decrease(self.nav.pitch)
          elseif action == "backward" then
            self.nav:increase(self.nav.pitch)
          elseif action == "right" then
            self.nav:increase(self.nav.roll)
          elseif action == "left" then
            self.nav:decrease(self.nav.roll)
          elseif action == "up" then
            self.nav:increase(self.nav.lift)
          elseif action == "down" then
            self.nav:decrease(self.nav.lift)
          elseif action == "yawright" then
            self.nav:decrease(self.nav.yaw)
          elseif action == "yawleft" then
            self.nav:increase(self.nav.yaw)
          elseif action == "brake" then
            self.nav:increase(self.nav.brake)
          elseif action == "stopengines" then
            self.nav.thrustManager:resetThrottle()
          elseif action == "booster" then
            self.nav:toggleBoosters()
          end
        end
        
        function NavManagerMode:onActionLoop (action)
          if action == "speedup" then
            self.nav.thrustManager:updateCommand(0.05)
          elseif action == "speeddown" then
            self.nav.thrustManager:updateCommand(-0.05)
          end
        end
        
        function NavManagerMode:onActionStop (action)
          if action == "forward" then
            self.nav:increase(self.nav.pitch)
          elseif action == "backward" then
            self.nav:decrease(self.nav.pitch)
          elseif action == "right" then
            self.nav:decrease(self.nav.roll)
          elseif action == "left" then
            self.nav:increase(self.nav.roll)
          elseif action == "up" then
            self.nav:decrease(self.nav.lift)
          elseif action == "down" then
            self.nav:increase(self.nav.lift)
          elseif action == "yawright" then
            self.nav:increase(self.nav.yaw)
          elseif action == "yawleft" then
            self.nav:decrease(self.nav.yaw)
          elseif action == "brake" then
            self.nav:decrease(self.nav.brake)
          end
        end
        
        function NavManagerMode:onUpdate ()
          self.nav:update()
        end
        
        function NavManagerMode:composeAngularAcceleration ()
          return
            self.nav:composeControlledStabAngularAcceleration(self.nav:getRollInput(), self.nav:getPitchInput()) +
            self.nav:composeTiltingAngularAcceleration() +
            self.nav:composeTurningAngularAcceleration(self.nav:getYawInput())
        end
        
        function NavManagerMode:onFlush ()
            -- compute acceleration and angularAcceleration
          local forward =  self.nav:composeForwardAcceleration(self.nav.thrustManager:getAccelerationCommand())
          local angularAcceleration = self:composeAngularAcceleration()
        
          self.nav:setEngineCommand("vertical,torque", self.nav:composeLiftUpAcceleration(self.nav:getLiftInput()), angularAcceleration)
          self.nav:setEngineCommand("horizontal", forward, nullvector)
          self.nav:setEngineCommand("brake", self.nav:composeBrakingAcceleration(self.nav:getBrakeInput()), nullvector)
          self.nav:setBoosterCommand("booster")
        end
        
        return NavManagerMode
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "pilot2.flight-modes.states.MouseRotationState" ] = function( ... ) _ENV = _ENV;
        local MouseRotationState = {}
        MouseRotationState.__index = MouseRotationState
        
        local lerp = utils.lerp
        
        function MouseRotationState.new (options)
          options = options or {}
        
          local self = {
            isActive = options.isActive or false,
        
            invertYaw = options.invertYaw or false,
            invertPitch = options.invertPitch or false,
        
            yawInertia = options.yawInertia or 0.15,
            yawSensitivity = options.yawSensitivity or 0.1,
        
            pitchInertia = options.pitchInertia or 0.1,
            pitchSensitivity = options.pitchSensitivity or 0.1,
        
            lastYawInput = 0,
            lastPitchInput = 0
          }
        
          return setmetatable(self, MouseRotationState)
        end
        
        function MouseRotationState:activate ()
          if self.isActive then return end
        
          self.lastYawInput = 0
          self.lastPitchInput = 0
        
          self.isActive = true
        end
        
        function MouseRotationState:deactivate ()
          if not self.isActive then return end
        
          self.isActive = false
        end
        
        function MouseRotationState:toggle ()
          if self.isActive then
            self:deactivate()
          else
            self:activate()
          end
        end
        
        -- assumining that the system flush event reliably runs 60 times per second
        -- if not, this code should account for time since last update
        
        function MouseRotationState:updateYaw (mouseDeltaX)
          local newYawInput = mouseDeltaX * self.yawSensitivity * (self.invertYaw and 1 or -1)
          self.lastYawInput = lerp(self.yawInertia, newYawInput, self.lastYawInput)
        end
        
        function MouseRotationState:updatePitch (mouseDeltaY)
          local newPitchInput = mouseDeltaY * self.pitchSensitivity * (self.invertPitch and 1 or -1)
          self.lastPitchInput = lerp(self.pitchInertia, newPitchInput, self.lastPitchInput)
        end
        
        return MouseRotationState
        
        end
        end
        
        do
        local _ENV = _ENV
        package.preload[ "pilot2.flight-modes.states.StrafeState" ] = function( ... ) _ENV = _ENV;
        local StrafeState = {}
        StrafeState.__index = StrafeState
        
        function StrafeState.new (options)
          options = options or {}
        
          local self = {
            isActive = options.isActive or false,
            acceleration = options.acceleration or 10,
          }
        
          return setmetatable(self, StrafeState)
        end
        
        function StrafeState:activate ()
          if self.isActive then return end
        
          self.isActive = true
        end
        
        function StrafeState:deactivate ()
          if not self.isActive then return end
        
          self.isActive = false
        end
        
        function StrafeState:toggle ()
          if self.isActive then
            self:deactivate()
          else
            self:activate()
          end
        end
        
        return StrafeState
        
        end
        end
        
        end
        
        __wrap_lua__stopOnError = true
        
        local Hal = require "common.Hal"
        local EnhancedNavManagerMode = require "pilot2.flight-modes.EnhancedNavManagerMode"
        
        local core = Hal.requireDynamicCore()
        local gyro = Hal.gyros[1]
        local control = Hal.requireControl()
        local system = Hal.requireSystem()
        local library = Hal.requireLibrary()
        local containers = Hal.containers
        
        for _, screenToClear in pairs(Hal.screens) do
          screenToClear.clear() -- in case there are screens displaying output from the previous control unit script
        end
        
        script = EnhancedNavManagerMode.new {
          core = core,
          gyro = gyro,
          control = control,
          system = system,
          library = library,
          containers = containers,
        
          mouseRotation = {
            yawInertia = 0.1,
            yawSensitivity = 0.07,
            pitchInertia = 0.1,
            pitchSensitivity = 0.07
          }
        }
        
        local baseOnActionStart = script.onActionStart
        function script:onActionStart (action)
          if action == "option1" then
            script.mouseRotation:toggle()
          elseif action == "option2" then
            script.strafe:toggle()
          else
            baseOnActionStart(self, action)
          end
        end
        
        script:onStart()
        
        -- some additional nav changes
        script.nav.composeTiltingAngularAcceleration = function () return nullvector end -- disable yaw when rolling in gravity. it's more efficient, but nobody likes it
        
        __wrap_lua__stopOnError = false
        --------------------------------------------------------------------------------
        -- enhanced nav script bundle ends
        --------------------------------------------------------------------------------
        
        
        -- error handling code added by wrap.lua
        end)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = pcall(script.onStop,script,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = pcall(script.onTick,script,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = pcall(script.onActionStart,script,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = pcall(script.onActionStop,script,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = pcall(script.onActionLoop,script,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = pcall(script.onUpdate,script,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = pcall(script.onFlush,script,system)
          if not ok then __wrap_lua__error(message) end
        end
