##################################################################################################
#
# Modify and *rename* this file to specify how to rebuild a LUA configuration from scratch
# Note: LUA code can be freely added after the | symbol, but cannot contain blank new lines
# See the YAML syntax for more detail: http://yaml.org/refcard.html
#
# For each auto-plugged slot generated using the 'all' selection, a corresponding array will be
# made automatically available to access the generated slots programmatically. For example:
#
# slots:
#    container:
#       class: FuelContainer
#       select: all
#
# will generate the array container[i], with i between 1 and container_size.
#
##################################################################################################

name: ODY AtmoNav Config By Eviltek

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    container:
        class: FuelContainer
        select: all
    gyro:
        class: GyroUnit

handlers:
    library:
        start:
            lua: |
                do
                local _ENV = _ENV
                    package.preload[ "pilot.HudDisplay" ] = function( ... ) local arg = _G.arg;
                    local HudDisplay = {}
                        function HudDisplay.new (isEmbedded)
                            local Nav = Navigator.new(self.system, self.core, self.unit)
                            local self = {} 
                            local Vector = {}
                            local FlightMode = 1
                            local hudMode = 1
                            local updateCounter = 0
                            local updateInterval = 1
                            local function updateHud ()
                            end
                            function self:onActionStart (action)
                                if action == "stopengines" then
                                    Nav.thrustManager:resetThrottle()
                                end
                                if action == "exit" then
                                    unit.exit()
                                end
                                if action == "booster" then
                                    Nav:toggleBoosters()
                                end
                                if action == "hud" then
                                    if hudMode == 1 then 
                                    hudMode = 2
                                    elseif hudMode == 2 then 
                                    hudMode = 3
                                    elseif hudMode == 3 then 
                                        hudMode = 1
                                    end
                                end
                                if action == "gear" then
                                    if FlightMode == 1 then 
                                    FlightMode = 0 
                                else 
                                    FlightMode = 1 
                                end
                                    updateHud()
                                end
                                if action == "Fire" then
                                    FireWeapons.toggle()
                                    updateHud()
                                end
                                if action == "forward" then
                                    if FlightMode == 0 then
                                        Nav:decrease(Nav.pitch)
                                    end
                                    if FlightMode == 1 then
                                        unit.axial = 1
                                    end
                                end
                                if action == "backward" then
                                    if FlightMode == 0 then
                                        Nav:increase(Nav.pitch)
                                    end
                                    if FlightMode == 1 then
                                        unit.axial = -1
                                    end
                                end
                                if action == "left" then
                                    if FlightMode == 0 then
                                        Nav:decrease(Nav.roll)
                                    end
                                    if FlightMode == 1 then
                                        unit.lateral = -1
                                    end
                                    
                                end
                                if action == "right" then
                                    if FlightMode == 0 then
                                        Nav:increase(Nav.roll)
                                    end
                                    if FlightMode == 1 then
                                        unit.lateral = 1
                                    end
                                end 
                                if action == "yawright" then
                                        Nav:decrease(Nav.yaw)
                                end
                                if action == "yawleft" then
                                        Nav:increase(Nav.yaw)
                                end
                                if action == "up" then
                                    if FlightMode == 0 then
                                        Nav:increase(Nav.lift)
                                    end
                                    if FlightMode == 1 then
                                        unit.verticalPower = 1
                                    end
                                end
                                if action == "down" then
                                    if FlightMode == 0 then
                                        Nav:decrease(Nav.lift)
                                    end
                                    if FlightMode == 1 then
                                        unit.verticalPower = -1
                                    end
                                end
                                if action == "brake" then
                                        Nav:increase(Nav.brake)
                                end
                            end
                            function self:onActionStop (action)
                                if action == "forward" then
                                    if FlightMode == 0 then
                                        Nav:increase(Nav.pitch)
                                    end
                                    if FlightMode == 1 then
                                        unit.axial = 0
                                    end
                                end
                                if action == "backward" then
                                    if FlightMode == 0 then
                                        Nav:decrease(Nav.pitch)
                                    end
                                    if FlightMode == 1 then
                                        unit.axial = 0
                                    end
                                end  
                                if action == "left" then
                                    if FlightMode == 0 then
                                        Nav:increase(Nav.roll)
                                    end
                                    if FlightMode == 1 then
                                        unit.lateral = 0
                                    end
                                end
                                if action == "right" then
                                    if FlightMode == 0 then
                                        Nav:decrease(Nav.roll)
                                    end
                                    if FlightMode == 1 then
                                        unit.lateral = 0
                                    end
                                end
                                if action == "yawright" then
                                        Nav:increase(Nav.yaw)
                                end
                                if action == "yawleft" then
                                        Nav:decrease(Nav.yaw)
                                end
                                if action == "up" then
                                    if FlightMode == 0 then
                                        Nav:decrease(Nav.lift)
                                    end
                                    if FlightMode == 1 then
                                        unit.verticalPower = 0
                                    end
                                end
                                if action == "down" then
                                    if FlightMode == 0 then
                                        Nav:increase(Nav.lift)
                                    end
                                    if FlightMode == 1 then
                                        unit.verticalPower = 0
                                    end
                                end
                                if action == "brake" then
                                        Nav:decrease(Nav.brake)
                                end
                            end
                            function self:onActionLoop (action)
                                if FlightMode == 0 then
                                    if action == "speedup" then
                                            Nav.thrustManager:updateCommand(0.05)
                                    end
                                    if action == "speeddown" then
                                            Nav.thrustManager:updateCommand(-0.05)
                                    end
                                end
                            end
                            function self:onStart (action)
                                container = {}
                                container[1] = container_1
                                container_size = 1
                                Nav.pitchRollAmplitude = 0.5
                                Nav.pitchStabVelocityStart = 30
                                Nav.pitchStabVelocityEnd = 60
                                Nav.rollStabVelocityStart = 110
                                Nav.rollStabVelocityEnd = 150
                                for i=1,container_size do container[i].show() end
                                if antigrav ~= nil then antigrav.show() end
                                if gyro ~= nil then gyro.show() end
                                core.show()
                                Nav.thrustManager.throttleStep = 0.01
                                unit.speed = 1000
                                unit.lateral = 0
                                unit.axial = 0
                                unit.vertical = 0
                                unit.verticalPower = 0
                            end
                            function self:onStop (action)
                                for i=1,container_size do container[i].hide() end
                                if antigrav ~= nil then antigrav.hide() end
                                if gyro ~= nil then gyro.hide() end
                                core.hide()
                                if not isEmbedded then
                                    system.showScreen(0)
                                end
                            end
                            function self:onUpdate ()
                                Nav:update()
                                if updateCounter == 0 then
                                  updateHud(self)
                                end
                                updateCounter = (updateCounter + 1) % updateInterval
                            end
                            function self:onFlush ()
                                local forward =  Nav:composeForwardAcceleration(Nav.thrustManager:getAccelerationCommand())
                                local angularAcceleration = Nav:composeControlledStabAngularAcceleration(Nav:getRollInput(), Nav:getPitchInput())
                                        + Nav:composeTiltingAngularAcceleration()
                                        + Nav:composeTurningAngularAcceleration(Nav:getYawInput())
                                local lDir = vec3(core.getConstructWorldOrientationRight()) * unit.lateral * unit.speed
                                local aDir = vec3(core.getConstructWorldOrientationForward()) * unit.axial * unit.speed
                                local vDir = vec3(core.getConstructWorldOrientationUp()) * unit.getThrottle() * 100 + 1
                                Nav:setEngineCommand('vertical,torque', Nav:composeLiftUpAcceleration(Nav:getLiftInput()), angularAcceleration)
                                Nav:setEngineCommand('brake', Nav:composeBrakingAcceleration(Nav:getBrakeInput()), nullvector)
                                Nav:setBoosterCommand('booster')
                                --Nav:setEngineCommand('torque', angularAcceleration, nullvector)
                                if FlightMode == 0 then
                                    Nav:setEngineCommand('horizontal', forward, nullvector)
                                    --Nav:setEngineCommand('vertical', Nav:composeLiftUpAcceleration(Nav:getLiftInput()), nullvector)
                                end
                                if FlightMode == 1 then
                                    --Nav:setEngineCommand('vertical', vDir, nullvector)
                                    Nav:setEngineCommand("lateral", lDir, nullvector)
                                    Nav:setEngineCommand("axial", aDir, nullvector)
                                end
                            end
                            return self
                        end
                        return HudDisplay
                    end   
                end
                local HudDisplay = require "pilot.HudDisplay"
                hudDisplay = HudDisplay.new()
                hudDisplay:onStart()
    unit:
        start:
            lua: |
                Nav = Navigator.new(self.system, self.core, self.unit)
                Nav.pitchRollAmplitude = 1.0
                Nav.pitchStabVelocityStart = 10
                Nav.pitchStabVelocityEnd = 30
                Nav.rollStabVelocityStart = 110
                Nav.rollStabVelocityEnd = 150
                for i=1,container_size do container[i].show() end
                if antigrav ~= nil then antigrav.show() end
                if gyro ~= nil then gyro.show() end
                core.show()
        stop:
            lua: |
                for i=1,container_size do container[i].hide() end
                if antigrav ~= nil then antigrav.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
    system:
        flush:
            lua: |
                local forward =  Nav:composeForwardAcceleration(Nav.thrustManager:getAccelerationCommand())
                local angularAcceleration = Nav:composeControlledStabAngularAcceleration(Nav:getRollInput(), Nav:getPitchInput())
                        + Nav:composeTiltingAngularAcceleration()
                        + Nav:composeTurningAngularAcceleration(Nav:getYawInput())
                Nav:setEngineCommand('vertical,torque', Nav:composeLiftUpAcceleration(Nav:getLiftInput()), angularAcceleration)
                Nav:setEngineCommand('horizontal', forward, nullvector)
                Nav:setEngineCommand('brake', Nav:composeBrakingAcceleration(Nav:getBrakeInput()), nullvector)
                Nav:setBoosterCommand('booster')
                hudDisplay:onFlush()
        update:
            lua: |
                Nav:update()
                hudDisplay:onUpdate()
        actionStart(action):
            lua: hudDisplay:onActionStart(action)
        actionStop(action):
            lua: hudDisplay:onActionStop(action)
        actionStart:
            args: [stopengines]
            lua: Nav.thrustManager:resetThrottle()
        actionLoop(action):
            lua: hudDisplay:onActionLoop(action)
        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end