# This is a file describing a standard autoconfiguration, do not edit.
# See custom/sample.conf for a more generic template and explanation on the syntax.

name: Airplane Cockpit

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    container:
        class: FuelContainer
        select: all
    gyro:
        class: GyroUnit

handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(self.system, self.core, self.unit)
                for i=1,container_size do container[i].show() end
                if antigrav ~= nil then antigrav.show() end
                if gyro ~= nil then gyro.show() end
                core.show()
        stop:
            lua: |
                for i=1,container_size do container[i].hide() end
                if antigrav ~= nil then antigrav.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()

    system:
        flush:
            lua: |
                local forward =  Nav:composeForwardAcceleration(Nav.thrustManager:getAccelerationCommand())
                local angularAcceleration = Nav:composeControlledStabAngularAcceleration(Nav:getRollInput(), Nav:getPitchInput())
                        + Nav:composeTiltingAngularAcceleration()
                        + Nav:composeTurningAngularAcceleration(Nav:getYawInput())
                Nav:setEngineCommand('vertical,torque', Nav:composeLiftUpAcceleration(Nav:getLiftInput()), angularAcceleration)
                Nav:setEngineCommand('horizontal', forward, nullvector)
                Nav:setEngineCommand('brake', Nav:composeBrakingAcceleration(Nav:getBrakeInput()), nullvector)
                Nav:setBoosterCommand('booster')
        update:
            lua: Nav:update()

        actionStart:
            args: [forward]
            lua: Nav:decrease(Nav.pitch)
        actionStop:
            args: [forward]
            lua: Nav:increase(Nav.pitch)
        actionStart:
            args: [backward]
            lua: Nav:increase(Nav.pitch)
        actionStop:
            args: [backward]
            lua: Nav:decrease(Nav.pitch)
        actionStart:
            args: [left]
            lua: Nav:decrease(Nav.roll)
        actionStop:
            args: [left]
            lua: Nav:increase(Nav.roll)
        actionStart:
            args: [right]
            lua: Nav:increase(Nav.roll)
        actionStop:
            args: [right]
            lua: Nav:decrease(Nav.roll)
        actionStart:
            args: [up]
            lua: Nav:increase(Nav.lift)
        actionStop:
            args: [up]
            lua: Nav:decrease(Nav.lift)
        actionStart:
            args: [down]
            lua: Nav:decrease(Nav.lift)
        actionStop:
            args: [down]
            lua: Nav:increase(Nav.lift)
        actionStart:
            args: [yawright]
            lua: Nav:decrease(Nav.yaw)
        actionStop:
            args: [yawright]
            lua: Nav:increase(Nav.yaw)
        actionStart:
            args: [yawleft]
            lua: Nav:increase(Nav.yaw)
        actionStop:
            args: [yawleft]
            lua: Nav:decrease(Nav.yaw)
        actionStart:
            args: [brake]
            lua: Nav:increase(Nav.brake)
        actionStop:
            args: [brake]
            lua: Nav:decrease(Nav.brake)
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: Nav.thrustManager:resetThrottle()
        actionLoop:
            args: [speedup]
            lua: Nav.thrustManager:updateCommand(0.05)
        actionLoop:
            args: [speeddown]
            lua: Nav.thrustManager:updateCommand(-0.05)
        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end